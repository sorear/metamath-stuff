1. each math symbol or label has a fully qualified form of ROOT$core$axarith$+

2. that keeps consistency where it is

3. a namespace has a set of labelled statements, a set of symbols, a set of
named sub-namespaces, and a set of merged namespaces

4. namespaces are a tree.  every namespace except the root is a sub-namespace
of exactly one other namespace

5. ROOT and PARENT are "sub-namespaces" of every namespace (except for
ROOT$PARENT) with the obvious interpretations

6. at any point in a database, there is a write namespace and a resolve set

7. to resolve a unit symbol in a set of namespaces:

    1. augment the set of namespaces with the merged namespaces of each,
    recursively

    2. if the symbol is in exactly one such namespace, use it, else croak

8. foo looks up foo in the current search set

9. foo$$bar looks up foo to find a namespace <foo>, then looks up bar in {
<foo> }

10. write namespace and resolve set are scoped by ${ $}. initial values are
ROOT and {ROOT}

11. $[ namespace SIMPLE $] creates (if nonexistent) SIMPLE in the write
namespace, then makes that the new write namespace and adds it to the resolve
set

12. $[ open TERM $] looks up TERM as a namespace, then adds it to the resolve
set

13. $[ close TERM $] looks up TERM as a namespace, then removes it.  the write
namespace can never be removed

14. $[ merge TERM $] looks up TERM, then adds it to the merge set of the
current namespace

15. unclear if we want an unmerge.  we don't have delete, anyway

16. set.mm definitions are namespaced as core${ util, prop, pred, sets, fun,
card, constructarith, axarith, ... }; apr1; mathbox$WHO$what

17. proof assistant will only use stuff from the currently open namespaces for
IMPROVE ALL and MINIMIZE_WITH *.  /INCLUDE_MATHBOXES goes away because you can
just not $[ open mathbox$sam $]

18. label searches can be scopified. v p rectheory$* would be nice :)

19.  $f is a sticky wicket.  since $f is "really" a property of the math
symbol, these should go into the namespace in most cases, but to maintain
compatibility we make the following concessions:

    1. $f is lexically scoped if it is found in a block with no $[ namespace $]

    2. namespaces have a priority which is defined by creation order at each
    level and is used for compressed proof ordering

    3. this means that compressed proofs are sensitive to include order of
    files.  ideally we'd change the spec for those so that $f hypotheses are less
    fragile

20. stub out an $[ autoload NAMESPACE file $] command which creates NAMESPACE
immediately, but flags it so that if anyone tries to $[ open $] it the
corresponding file is sourced.  will need to auto wrap files in a block, and do
some magic to prevent hypotheses from leaking in.

21. another idea for the future: $[ alias (constant/variable/namespace/label)
SOURCE TO $]
